# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.rider import Rider  # noqa: F401,E501
from swagger_server import util


class Event(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, ride_with_gp_surl: str=None, tags: List[Rider]=None):  # noqa: E501
        """Event - a model defined in Swagger

        :param id: The id of this Event.  # noqa: E501
        :type id: int
        :param name: The name of this Event.  # noqa: E501
        :type name: str
        :param ride_with_gp_surl: The ride_with_gp_surl of this Event.  # noqa: E501
        :type ride_with_gp_surl: str
        :param tags: The tags of this Event.  # noqa: E501
        :type tags: List[Rider]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'ride_with_gp_surl': str,
            'tags': List[Rider]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'ride_with_gp_surl': 'rideWithGPSurl',
            'tags': 'tags'
        }

        self._id = id
        self._name = name
        self._ride_with_gp_surl = ride_with_gp_surl
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Event.


        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Event.


        :param name: The name of this Event.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ride_with_gp_surl(self) -> str:
        """Gets the ride_with_gp_surl of this Event.


        :return: The ride_with_gp_surl of this Event.
        :rtype: str
        """
        return self._ride_with_gp_surl

    @ride_with_gp_surl.setter
    def ride_with_gp_surl(self, ride_with_gp_surl: str):
        """Sets the ride_with_gp_surl of this Event.


        :param ride_with_gp_surl: The ride_with_gp_surl of this Event.
        :type ride_with_gp_surl: str
        """
        if ride_with_gp_surl is None:
            raise ValueError("Invalid value for `ride_with_gp_surl`, must not be `None`")  # noqa: E501

        self._ride_with_gp_surl = ride_with_gp_surl

    @property
    def tags(self) -> List[Rider]:
        """Gets the tags of this Event.


        :return: The tags of this Event.
        :rtype: List[Rider]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[Rider]):
        """Sets the tags of this Event.


        :param tags: The tags of this Event.
        :type tags: List[Rider]
        """

        self._tags = tags
